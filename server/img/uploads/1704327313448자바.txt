- 자바와 자바스크립트의 가장 큰 차이는?

공통점 :  둘다 객체지향형 언어 

자바의 캡슐화 다형성의 조건
 
부모-자식 
인터페이스-구현페이스 


자바스크립트의 캡슐화 다형성 
상속 개념이 존재함



자바 vs 자바스크립트 차이
Java는 OOP 프로그래밍 언어인 반면, JavaScript는 OOP 스크립팅 언어입니다.
Java는 가상 시스템 또는 브라우저에서 실행되는 응용 프로그램을 작성하는 반면, JavaScript 코드는 브라우저에서만 실행됩니다.
Java 코드는 컴파일이 필요하지만, JavaScript 코드는 모두 텍스트입니다.

※ 스크립팅 언어 : 컴파일(compile)을 하지 않고, 작성해서 바로 실행시킬 수 있는 언어

※ 컴파일(compile) : 인간이 구분하기 쉬운 언어로 작성된 프로그램을 기계어(컴퓨터 등의 기계가 이해할 수 있는 언어)로 번역하는 것


 
Java와 JavaScript는 둘 다 프로그래밍 언어이지만, 각각의 용도와 기능에 차이가 있습니다.Java는 주로 서버 측 프로그래밍, 안드로이드 앱 개발 등 다양한 분야에서 사용되며, 대규모 응용 프로그램을 만드는 데 사용됩니다. Java는 컴파일 언어이기 때문에, 코드를 컴파일하여 기계어로 변환해야 합니다. Java는 안정성과 보안성이 뛰어나며, 다양한 운영 체제에서 작동할 수 있는 플랫폼 독립적인 특징을 가지고 있습니다.
반면, JavaScript는 주로 클라이언트 측 프로그래밍 언어로 사용되며, HTML, CSS와 함께 웹 페이지를 동적으로 만드는 데 사용됩니다. 


1. 객체 지향 프로그래밍 언어 vs 스크립트 언어
Java는 객체 지향 프로그래밍 언어이고, 강력한 타입 체크를 통해 안정성과 보안성을 보장합니다. 
반면, JavaScript는 스크립트 언어로, 더 유연하고 동적인 프로그래밍이 가능합니다.
2. 컴파일 언어 vs 스크립트 언어
Java는 컴파일 언어이기 때문에, 코드를 작성한 후 컴파일하여 기계어로 변환해야 합니다. 이 과정에서 높은 성능을 보장할 수 있습니다. 
반면, JavaScript는 인터프리터 언어이므로, 코드를 작성한 후 즉시 실행할 수 있습니다.
3. 서버 측 vs 클라이언트 측
Java는 주로 서버 측에서 사용되며, 안드로이드 앱 개발 등에도 많이 사용됩니다. 반면, JavaScript는 주로 웹 페이지의 클라이언트 측에서 사용되며, HTML과 CSS와 함께 동적인 웹 페이지를 만드는 데 사용됩니다. 
4. 운영 체제 독립적 vs 브라우저 종속적
Java는 운영 체제 독립적인 특징을 가지고 있어, 다양한 운영 체제에서 사용할 수 있습니다. 반면, JavaScript는 브라우저 종속적인 특징을 가지고 있어, 브라우저마다 동작하는 방식이 다를 수 있습니다.
5. 타입 체크 vs 동적 타이핑
Java는 강력한 타입 체크를 통해 오류를 방지하며, 코드의 안정성을 보장합니다. 반면, JavaScript는 동적 타이핑으로, 변수 타입을 지정하지 않고도 코드를 작성할 수 있습니다.
6. 객체 생성 방식
Java에서는 클래스를 이용하여 객체를 생성하며, 상속과 인터페이스를 이용하여 객체의 구조를 정의할 수 있습니다. 반면, JavaScript에서는 프로토타입 기반 객체 생성 방식을 사용합니다.
7. 멀티스레드 vs 싱글 스레드
Java는 멀티스레드를 지원합니다. 즉, 하나의 프로그램에서 여러 개의 스레드를 동시에 실행할 수 있어, 프로그램의 처리 속도를 향상시킬 수 있습니다. 반면, JavaScript는 싱글 스레드로 동작합니다. 따라서, 하나의 탭에서 여러 개의 JavaScript 코드를 실행하더라도, 각 코드는 순차적으로 실행되기 때문에 성능상 이슈가 발생할 수 있습니다. 
8. 패키지와 모듈
Java에서는 패키지를 이용하여 코드의 구조를 모듈화할 수 있습니다. 이를 통해 코드의 가독성과 유지보수성을 높일 수 있습니다. 반면, JavaScript에서는 ES6부터 모듈이라는 개념이 도입되어 모듈화가 가능해졌습니다. 하지만, 여전히 모듈화를 위한 표준화된 방법이 없기 때문에, 다양한 모듈 로더와 번들러가 존재합니다. 
9. 라이브러리와 프레임워크
Java에서는 다양한 라이브러리와 프레임워크를 제공합니다. 라이브러리는 자주 사용되는 함수나 클래스 등을 미리 작성해 놓은 것이며, 개발자가 필요할 때 가져다 쓸 수 있습니다. 반면, 프레임워크는 애플리케이션의 전체적인 구조를 미리 정해 놓은 것으로, 개발자가 이를 따라가면서 애플리케이션을 개발할 수 있습니다. JavaScript에서도 많은 라이브러리와 프레임워크가 제공되고 있습니다.






- 얕은 복사 VS 깊은 복사 


참조타입의 데이터(객체, 배열, 함수, 날짜....)는 복사 시 데이터의 값이 아닌 값이 저장된 메모리의 주소가 저장된다. 
따라서 참조타입의 복사 방법은 얕은 복사와 깊은 복사로 나뉜다 

자바로 개발을 하다보면 객체를 복사할 일이 있다. 이럴 때 나오는 개념이 얕은 복사(Shallow Copy)와 깊은 복사(Deep Copy) 개념인데, 두 개념의 차이를 간단하게 말하면 얕은 복사는 객체의 참조값(주소값)을 복사하고, 깊은 복사는 객체의 실제 값(value)를 복사한다.




1. 얕은 복사(Shallow Copy)  

객체를 복사할 때, 해당 객체만 복사하여 새 객체를 생성한다. 
복사된 객체의 인스턴스 변수는 원본 객체의 인스턴스 변수와 같은 메모리 주소를 참조한다.
따라서, 해당 메모리 주소의 값이 변경되면 원본 객체 및 복사 객체의 인스턴스 변수 값은 같이 변경된다.

장점	빠르고 간결하다.
단점	바로 위의 다형성의 장점이 존재하지만 값을 참조하는 것이므로 원본 객체에 종속적인 단점도 존재한다.
원본 객체가 수정되는 경우 복사 객체가 원본 객체와 동일하게 변동이 생긴다.

let obj1 = { name: 'choar', age: 20 };
let obj2 = obj1;
console.log(obj1); // { name: 'choar', age: 20 }
console.log(obj2); // { name: 'choar', age: 20 }

obj1.name = 'hi';
console.log(obj1); // { name: 'hi', age: 20 }
console.log(obj2); // { name: 'hi', age: 20 }
// 얕은 복사로 인해 obj1, obj2가 가리키는 객체는 같다.

/* 얕은 복사시 주의!!! */ 
let origin = ["a", "b", ["c"]];
let copy = origin.slice();

copy[2].push("d");

console.log(origin); //["a", "b", ["c", "d"]]; // 원본까지 바뀌어버림
console.log(copy); //["a", "b", ["c", "d"]];

2. 깊은 복사(Deep Copy)

객체를 복사 할 때, 해당 객체와 인스턴스 변수까지 복사하는 방식.
전부를 복사하여 새 주소에 담기 때문에 참조를 공유하지 않는다.

장점:객체 자체를 복사하기 때문에 독립된 새로운 객체로 다형성을 부여하여 사용하거나 재정의할 수 있다.
단점 모든 인스턴스 값을 갖고 오기 때문에 얕은 복사에 비해서 상대적으로 느리고 복잡하다.


// lodash의 cloneDeep을 사용한 깊은 복사
// "npm install lodash"로 lodash를 설치한 후, Node.js 환경에서 실행
const _ = require('lodash');
let obj3 = _.cloneDeep(obj1);
obj3.name = 'hello';
console.log(obj1); // { name: 'hi', age: 20 }
console.log(obj3); // { name: 'hello', age: 20 }